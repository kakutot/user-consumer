/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.larecette.kafka;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserKafka extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6569155600510816454L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserKafka\",\"namespace\":\"com.larecette.kafka\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"activity\",\"type\":\"int\"},{\"name\":\"blacklist\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"gender\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"height\",\"type\":\"double\"},{\"name\":\"weight\",\"type\":\"double\"},{\"name\":\"includeCooked\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserKafka> ENCODER =
          new BinaryMessageEncoder<UserKafka>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserKafka> DECODER =
          new BinaryMessageDecoder<UserKafka>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<UserKafka> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<UserKafka> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserKafka>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this UserKafka to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a UserKafka from a ByteBuffer. */
  public static UserKafka fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String userId;
  private int activity;
  private java.util.List<java.lang.String> blacklist;
  private java.lang.String gender;
  private double height;
  private double weight;
  private boolean includeCooked;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserKafka() {}

  /**
   * All-args constructor.
   * @param userId The new value for userId
   * @param activity The new value for activity
   * @param blacklist The new value for blacklist
   * @param gender The new value for gender
   * @param height The new value for height
   * @param weight The new value for weight
   * @param includeCooked The new value for includeCooked
   */
  public UserKafka(java.lang.String userId, java.lang.Integer activity, java.util.List<java.lang.String> blacklist, java.lang.String gender, java.lang.Double height, java.lang.Double weight, java.lang.Boolean includeCooked) {
    this.userId = userId;
    this.activity = activity;
    this.blacklist = blacklist;
    this.gender = gender;
    this.height = height;
    this.weight = weight;
    this.includeCooked = includeCooked;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0: return userId;
      case 1: return activity;
      case 2: return blacklist;
      case 3: return gender;
      case 4: return height;
      case 5: return weight;
      case 6: return includeCooked;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0: userId = (java.lang.String)value$; break;
      case 1: activity = (java.lang.Integer)value$; break;
      case 2: blacklist = (java.util.List<java.lang.String>)value$; break;
      case 3: gender = (java.lang.String)value$; break;
      case 4: height = (java.lang.Double)value$; break;
      case 5: weight = (java.lang.Double)value$; break;
      case 6: includeCooked = (java.lang.Boolean)value$; break;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'activity' field.
   * @return The value of the 'activity' field.
   */
  public java.lang.Integer getActivity() {
    return activity;
  }

  /**
   * Sets the value of the 'activity' field.
   * @param value the value to set.
   */
  public void setActivity(java.lang.Integer value) {
    this.activity = value;
  }

  /**
   * Gets the value of the 'blacklist' field.
   * @return The value of the 'blacklist' field.
   */
  public java.util.List<java.lang.String> getBlacklist() {
    return blacklist;
  }

  /**
   * Sets the value of the 'blacklist' field.
   * @param value the value to set.
   */
  public void setBlacklist(java.util.List<java.lang.String> value) {
    this.blacklist = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * @return The value of the 'gender' field.
   */
  public java.lang.String getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.String value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'height' field.
   * @return The value of the 'height' field.
   */
  public java.lang.Double getHeight() {
    return height;
  }

  /**
   * Sets the value of the 'height' field.
   * @param value the value to set.
   */
  public void setHeight(java.lang.Double value) {
    this.height = value;
  }

  /**
   * Gets the value of the 'weight' field.
   * @return The value of the 'weight' field.
   */
  public java.lang.Double getWeight() {
    return weight;
  }

  /**
   * Sets the value of the 'weight' field.
   * @param value the value to set.
   */
  public void setWeight(java.lang.Double value) {
    this.weight = value;
  }

  /**
   * Gets the value of the 'includeCooked' field.
   * @return The value of the 'includeCooked' field.
   */
  public java.lang.Boolean getIncludeCooked() {
    return includeCooked;
  }

  /**
   * Sets the value of the 'includeCooked' field.
   * @param value the value to set.
   */
  public void setIncludeCooked(java.lang.Boolean value) {
    this.includeCooked = value;
  }

  /**
   * Creates a new UserKafka RecordBuilder.
   * @return A new UserKafka RecordBuilder
   */
  public static UserKafka.Builder newBuilder() {
    return new UserKafka.Builder();
  }

  /**
   * Creates a new UserKafka RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserKafka RecordBuilder
   */
  public static UserKafka.Builder newBuilder(UserKafka.Builder other) {
    return new UserKafka.Builder(other);
  }

  /**
   * Creates a new UserKafka RecordBuilder by copying an existing UserKafka instance.
   * @param other The existing instance to copy.
   * @return A new UserKafka RecordBuilder
   */
  public static UserKafka.Builder newBuilder(UserKafka other) {
    return new UserKafka.Builder(other);
  }

  /**
   * RecordBuilder for UserKafka instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserKafka>
          implements org.apache.avro.data.RecordBuilder<UserKafka> {

    private java.lang.String userId;
    private int activity;
    private java.util.List<java.lang.String> blacklist;
    private java.lang.String gender;
    private double height;
    private double weight;
    private boolean includeCooked;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(UserKafka.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.activity)) {
        this.activity = data().deepCopy(fields()[1].schema(), other.activity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.blacklist)) {
        this.blacklist = data().deepCopy(fields()[2].schema(), other.blacklist);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gender)) {
        this.gender = data().deepCopy(fields()[3].schema(), other.gender);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.height)) {
        this.height = data().deepCopy(fields()[4].schema(), other.height);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.weight)) {
        this.weight = data().deepCopy(fields()[5].schema(), other.weight);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.includeCooked)) {
        this.includeCooked = data().deepCopy(fields()[6].schema(), other.includeCooked);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UserKafka instance
     * @param other The existing instance to copy.
     */
    private Builder(UserKafka other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.activity)) {
        this.activity = data().deepCopy(fields()[1].schema(), other.activity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.blacklist)) {
        this.blacklist = data().deepCopy(fields()[2].schema(), other.blacklist);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gender)) {
        this.gender = data().deepCopy(fields()[3].schema(), other.gender);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.height)) {
        this.height = data().deepCopy(fields()[4].schema(), other.height);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.weight)) {
        this.weight = data().deepCopy(fields()[5].schema(), other.weight);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.includeCooked)) {
        this.includeCooked = data().deepCopy(fields()[6].schema(), other.includeCooked);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Gets the value of the 'userId' field.
     * @return The value.
     */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
     * Sets the value of the 'userId' field.
     * @param value The value of 'userId'.
     * @return This builder.
     */
    public UserKafka.Builder setUserId(java.lang.String value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'userId' field has been set.
     * @return True if the 'userId' field has been set, false otherwise.
     */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'userId' field.
     * @return This builder.
     */
    public UserKafka.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'activity' field.
     * @return The value.
     */
    public java.lang.Integer getActivity() {
      return activity;
    }

    /**
     * Sets the value of the 'activity' field.
     * @param value The value of 'activity'.
     * @return This builder.
     */
    public UserKafka.Builder setActivity(int value) {
      validate(fields()[1], value);
      this.activity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'activity' field has been set.
     * @return True if the 'activity' field has been set, false otherwise.
     */
    public boolean hasActivity() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'activity' field.
     * @return This builder.
     */
    public UserKafka.Builder clearActivity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'blacklist' field.
     * @return The value.
     */
    public java.util.List<java.lang.String> getBlacklist() {
      return blacklist;
    }

    /**
     * Sets the value of the 'blacklist' field.
     * @param value The value of 'blacklist'.
     * @return This builder.
     */
    public UserKafka.Builder setBlacklist(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.blacklist = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'blacklist' field has been set.
     * @return True if the 'blacklist' field has been set, false otherwise.
     */
    public boolean hasBlacklist() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'blacklist' field.
     * @return This builder.
     */
    public UserKafka.Builder clearBlacklist() {
      blacklist = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'gender' field.
     * @return The value.
     */
    public java.lang.String getGender() {
      return gender;
    }

    /**
     * Sets the value of the 'gender' field.
     * @param value The value of 'gender'.
     * @return This builder.
     */
    public UserKafka.Builder setGender(java.lang.String value) {
      validate(fields()[3], value);
      this.gender = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'gender' field has been set.
     * @return True if the 'gender' field has been set, false otherwise.
     */
    public boolean hasGender() {
      return fieldSetFlags()[3];
    }


    /**
     * Clears the value of the 'gender' field.
     * @return This builder.
     */
    public UserKafka.Builder clearGender() {
      gender = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'height' field.
     * @return The value.
     */
    public java.lang.Double getHeight() {
      return height;
    }

    /**
     * Sets the value of the 'height' field.
     * @param value The value of 'height'.
     * @return This builder.
     */
    public UserKafka.Builder setHeight(double value) {
      validate(fields()[4], value);
      this.height = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'height' field has been set.
     * @return True if the 'height' field has been set, false otherwise.
     */
    public boolean hasHeight() {
      return fieldSetFlags()[4];
    }


    /**
     * Clears the value of the 'height' field.
     * @return This builder.
     */
    public UserKafka.Builder clearHeight() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'weight' field.
     * @return The value.
     */
    public java.lang.Double getWeight() {
      return weight;
    }

    /**
     * Sets the value of the 'weight' field.
     * @param value The value of 'weight'.
     * @return This builder.
     */
    public UserKafka.Builder setWeight(double value) {
      validate(fields()[5], value);
      this.weight = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'weight' field has been set.
     * @return True if the 'weight' field has been set, false otherwise.
     */
    public boolean hasWeight() {
      return fieldSetFlags()[5];
    }


    /**
     * Clears the value of the 'weight' field.
     * @return This builder.
     */
    public UserKafka.Builder clearWeight() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'includeCooked' field.
     * @return The value.
     */
    public java.lang.Boolean getIncludeCooked() {
      return includeCooked;
    }

    /**
     * Sets the value of the 'includeCooked' field.
     * @param value The value of 'includeCooked'.
     * @return This builder.
     */
    public UserKafka.Builder setIncludeCooked(boolean value) {
      validate(fields()[6], value);
      this.includeCooked = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'includeCooked' field has been set.
     * @return True if the 'includeCooked' field has been set, false otherwise.
     */
    public boolean hasIncludeCooked() {
      return fieldSetFlags()[6];
    }


    /**
     * Clears the value of the 'includeCooked' field.
     * @return This builder.
     */
    public UserKafka.Builder clearIncludeCooked() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserKafka build() {
      try {
        UserKafka record = new UserKafka();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.String) defaultValue(fields()[0]);
        record.activity = fieldSetFlags()[1] ? this.activity : (java.lang.Integer) defaultValue(fields()[1]);
        record.blacklist = fieldSetFlags()[2] ? this.blacklist : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.gender = fieldSetFlags()[3] ? this.gender : (java.lang.String) defaultValue(fields()[3]);
        record.height = fieldSetFlags()[4] ? this.height : (java.lang.Double) defaultValue(fields()[4]);
        record.weight = fieldSetFlags()[5] ? this.weight : (java.lang.Double) defaultValue(fields()[5]);
        record.includeCooked = fieldSetFlags()[6] ? this.includeCooked : (java.lang.Boolean) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserKafka>
          WRITER$ = (org.apache.avro.io.DatumWriter<UserKafka>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserKafka>
          READER$ = (org.apache.avro.io.DatumReader<UserKafka>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
